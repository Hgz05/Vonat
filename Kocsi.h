#ifndef KOCSI_H
#define KOCSI_H
#include <string>

#include "Ules.h"
/**
 * The kocsi type enums.
 */
enum eKocsiTipus
{
    Elso,
    Masod,
    Alvo
};
/**
 * Kocsi class.
 */
class Kocsi
{
    /**
     * Next node of the kocsi linked list.
     */
    Kocsi *nextNode = nullptr;
    /**
     * The number of the car.
     */
    int KocsiSzam;
    /**
     * The type of the car.
     */
    eKocsiTipus KocsiTipus;
    /**
     * Ules array that stores the seats of the car.
     */
    Ules **UlesArray;

public:
    /**
     * Kocsi constructor.
     * @param cKocsiSzam Number of the kocsi.
     * @param cKocsiTipus Kocsi type.
     */
    explicit Kocsi(int cKocsiSzam = -1, eKocsiTipus cKocsiTipus = Elso); // The Ules array will be generated by the constructor according to the type of the car and the number of a car. Each passanger car will have fix 60 seats. So the array containing the Ules-classes will be 60 long and the seat numbers will change according to the car number. E.g car 1: 1-60 (seat num), car 2 : 60-120 (seat num).Sleaping cars will have 60 beds.
    /**
     * Kocsi copy constructor.
     * @param KocsiCopy Kocsi to copy.
     */
    explicit Kocsi(Kocsi* KocsiCopy);
    /**
     * Kocsi destructor.
     */
    ~Kocsi();
    /**
     * Kocsi szam getter.
     * @return Kocsi szam.
     */
    int getKocsiSzam() const;
    /**
     * Kocsi type getter.
     * @return Kocsi type.
     */
    eKocsiTipus getKocsiTipus();
    /**
     * Ules search by it's number.
     * @param UlesSzam The number of the ules to be searched.
     * @return The ules pointer of the number.
     */
    Ules* FindUlesBySzam(int UlesSzam);
    /**
     * It prints all the kocsi information.
     */
    void PrintKocsik();
    /**
     * A side method for flie write.
     * @return String used for file write.
     */
    std::string KocsiToFile();
    /**
     * Kocsi type to string converte.
     * @param KocsiTipus Kocsi type to be converted.
     * @return The string version of the enum.
     */
    std::string enumToString(eKocsiTipus KocsiTipus);
    /**
     * String to kocsi type converter.
     * @param KocsiTipus String to be converted into enum.
     * @return The enum for the string.
     */
    static eKocsiTipus stringToKocsiTipus(std::string KocsiTipus);
    /**
     * Kocsi linked list next node getter.
     * @return The next node of the kocsi linked list.
     */
    Kocsi *getNextNode();
    /**
     * Kocsi linked list next node setter.
     * @param nextPtr Next node pointer to set.
     */
    void setNextNode(Kocsi *nextPtr);
    /**
     * It adds a new kocsi at the end of the kocsi linked list.
     * @param newKocsi New kocsi to add.
     */
    void operator+(Kocsi *newKocsi);
};

#endif